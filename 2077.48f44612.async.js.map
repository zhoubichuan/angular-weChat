{"version":3,"sources":["webpack://ant-design-pro/./node_modules/numeral/numeral.js"],"names":[],"mappings":"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","file":"2077.48f44612.async.js","sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n"],"sourceRoot":""}